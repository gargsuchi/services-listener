<?php

/**
 * @file
 * Adds search API features to the Twitter module.
 */

libraries_load('guzzlehttp');
use Symfony\Component\DependencyInjection\ContainerInterface;
use Drupal\Core\DependencyInjection\ContainerInjectionInterface;
use Guzzle\Plugin\OAuth\OAuthPlugin;
use GuzzleHttp\Client;
use GuzzleHttp\Subscriber\Oauth\Oauth1;

/**
 * Implements hook_views_api().
 */
function twitter_search_views_api() {
  return array('api' => '2.0');
}


/**
 * @file
 * Provides the Guzzle HTTP plugin.
 */
function twitter_search_libraries_info() {
  $libraries['guzzlehttp'] = array(
    // Only used in administrative UI of Libraries API.
    'name' => 'HTTP plugin for Guzzle',
    'vendor url' => 'https://github.com/guzzle/oauth-subscriber',
    'download url' => 'https://github.com/guzzle/oauth-subscriber/archive/master.zip',
    'version' => '*',
    // Optional: If, after extraction, the actual library files are contained in
    // 'sites/all/libraries/example/lib', specify the relative path here.
    'path' => 'oauth-subscriber',
    // Default list of files of the library to load. Important: Only specify
    // third-party files belonging to the library here, not integration files of
    // your module.
    'files' => array(
      // For PHP libraries, specify include files here, still relative to the
      // library path.
      'php' => array(
        'src/Oauth1.php',
      ),
    ),
  );

  return $libraries;
}

/**
 * Implements hook_cron().
 *
 * Imports new Twitter search statuses for site searches.
 */
function twitter_search_cron() {
  libraries_load('guzzlehttp');
  libraries_load_files('guzzlehttp');

  $client = new Client(['base_url' => 'https://api.twitter.com/', 'defaults' => ['auth' => 'oauth']]);
  $oauth = new Oauth1([
    'consumer_key'  => \Drupal::config('twitter.settings')->get('twitter_consumer_key'),
    'consumer_secret' => \Drupal::config('twitter.settings')->get('twitter_consumer_secret'),
    'token'       => \Drupal::config('twitter.settings')->get('oauth_token'),
    'token_secret'  => \Drupal::config('twitter.settings')->get('oauth_token_secret'),
    /*
     * 'token'       => '14174483-mSD6lcPj8u7HVi0mf5FRKogZEL7qhyx043GLZbeuk',
    'token_secret'  => 'JK5rpO3uD1yqPY0h7wUOPAtgRWeXg3aWzsyCFB01WWWbG',
     */
  ]);

  $client->getEmitter()->attach($oauth);

  // Get a list of search strings to update.
  $sql = "SELECT twitter_search_id, search, last_twitter_id
          FROM {twitter_search}
          ORDER BY last_refresh";
  $results = db_query($sql);

  try {
    while ($search = $results->fetchAssoc()) {

      $search_term = $search['search'];

      $statuses = $client->get('1.1/search/tweets.json?q=' . $search_term)->json();

      if (!empty($statuses)) {
        $statuses = $statuses['statuses'];
        db_update('twitter_search')
          ->fields(array(
            'last_twitter_id' => $statuses[0]['id'],
            'last_refresh' => $_SERVER['REQUEST_TIME'],
          ))
          ->condition('search', $search_term)
          ->execute();

        // add data into twitter_search_tweet
        $twitter_search_id = $search['twitter_search_id'];
        foreach($statuses AS $status) {
         twitter_status_save($status);
         $twitter_id = $status['id'];
         db_insert('twitter_search_tweet')
              ->fields(array(
                'twitter_search_id' => $twitter_search_id,
                'twitter_id' => $twitter_id
              ))
              ->execute();

        }
      }
    }
  }
  catch (TwitterException $e) {
    // The exception has already been logged so we do not need to do
    // anything here apart from caching it.
  }
}

/**
 * Implement the "search" method from Twitter.
 *
 * @see http://apiwiki.twitter.com/Twitter-Search-API-Method%3A+search
 *
 * @param String $search
 *   Assoc array containing search string, search id, and last twitter id.
 *
 * @return Boolean
 *   Whether or not to cache the Twitter statues.
 */
function twitter_search_fetch_search($search) {
  // Check if we can connect to Twitter before proceeding.
  module_load_include('inc', 'twitter');
  $twitter = twitter_connect();
  if (!$twitter) {
    return;
  }
  // Fetch tweets.
  $statuses = $twitter->search_tweets($search, $params);
  foreach ($statuses as $status) {
    twitter_status_save($status);
    twitter_account_save($status->user);
  }
  return $statuses;
}

/**
 * Tests whether search already exists.
 *
 * @param String $search
 *   Assoc array containing search string, search id, and last twitter id.
 *
 * @return Boolean
 *   Boolean. Whether or not to cache the Twitter statues.
 */
function twitter_search_already_exists($search) {
  $result = db_query("SELECT search FROM {twitter_search} WHERE search = :search", array(':search' => $search))->fetchField();
  return $result ? TRUE : FALSE;
}

